/**
 *  This file is part of the Playdate CPP Extensions library, and covered under
 *  the license terms found in the LICENSE file at the root of the repository.
 *
 *  Copyright (c) 2023 - Metaphase
 *
 *  Created: 9/27/2023
 *  Original author: MrBZapp
 */

#include "pdcpp/graphics/Colors.h"

pdcpp::Color pdcpp::Colors::black({
    // Bitmap
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::white({
    // Bitmap
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::clear({
    // Bitmap
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
    // Mask
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
});

pdcpp::Color pdcpp::Colors::transparent50GrayA({
    // Bitmap
    0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101,
    // Mask
    0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010,
});

pdcpp::Color pdcpp::Colors::transparent50GrayB({
    // Bitmap
    0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010,
    // Mask
    0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101,
});

pdcpp::Color pdcpp::Colors::solid50GrayA({
    // Bitmap
    0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101, 0b10101010, 0b01010101,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::solid50GrayB = solid50GrayA.inverted();

pdcpp::Color pdcpp::Colors::sparseCheckerA({
    // Bitmap
    0b11111111, 0b11101110, 0b11111111, 0b10111011, 0b11111111, 0b11101110, 0b11111111, 0b10111011,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::thickVerticalLinesA({
    // Bitmap
    0b11110000, 0b11110000, 0b11110000, 0b11110000, 0b11110000, 0b11110000, 0b11110000, 0b11110000,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::verticalLines25A({
    // Bitmap
    0b11001100, 0b11001100, 0b11001100, 0b11001100, 0b11001100, 0b11001100, 0b11001100, 0b11001100,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::diagonalLinesRightWhiteOnBlack({
    // Bitmap
    0b10001000, 0b00010001, 0b00100010, 0b01000100, 0b10001000, 0b00010001, 0b00100010, 0b01000100,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::diagonalLinesRightBlackOnWhite({
    // Bitmap
    0b01110111, 0b11101110, 0b11011101, 0b10111011, 0b01110111, 0b11101110, 0b11011101, 0b10111011,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::steppedDither0({
    // Bitmap
    0b10000000, 0b00010000, 0b00000010, 0b01000000, 0b00001000, 0b00000001, 0b00100000, 0b00000100,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::steppedDither1({
    // Bitmap
    0b11000000, 0b00011000, 0b00000011, 0b01100000, 0b00001100, 0b10000001, 0b00110000, 0b00000110,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::steppedDither2({
    // Bitmap
    0b11000001, 0b00111000, 0b00000111, 0b11100000, 0b00011100, 0b10000011, 0b01110000, 0b00001110,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::steppedDither3({
    // Bitmap
    0b11100001, 0b00111100, 0b10000111, 0b11110000, 0b00011110, 0b11000011, 0b01111000, 0b00001111,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::steppedDither4({
    // Bitmap
    0b11100011, 0b01111100, 0b10001111, 0b11110001, 0b00111110, 0b11000111, 0b11111000, 0b00011111,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::steppedDither5({
    // Bitmap
    0b11110011, 0b01111110, 0b11001111, 0b11111001, 0b00111111, 0b11100111, 0b11111100, 0b10011111,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::steppedDither6({
    // Bitmap
    0b11110111, 0b11111110, 0b11011111, 0b11111011, 0b01111111, 0b11101111, 0b11111101, 0b10111111,
    // Mask
    0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
});

pdcpp::Color pdcpp::Colors::gradient[9] = {
    kColorBlack,
    steppedDither0,
    steppedDither1,
    steppedDither2,
    steppedDither3,
    steppedDither4,
    steppedDither5,
    steppedDither6,
    kColorWhite
};
